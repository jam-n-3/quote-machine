{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","colors","color","quotes","quote","tweet","setColor","bind","setQuote","setTweet","handleClick","this","setState","Math","floor","random","length","author","e","preventDefault","className","style","backgroundColor","id","onClick","href","data-text","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPA4EeA,G,wDAxEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,OAAQ,CAAC,MAAM,SAAS,SAAS,QAAS,OAAQ,SAAU,UAC5DC,MAAO,EAEPC,OAAQ,CACN,CAAC,MAAQ,8EAAoE,OAAS,eACtF,CAAC,MAAQ,qEAAqE,OAAS,iBACvF,CAAC,MAAQ,yDAAyD,OAAS,mBAC3E,CAAC,MAAQ,kHAA6G,OAAS,gBAC/H,CAAC,MAAQ,mEAAmE,OAAS,wBACrF,CAAC,MAAQ,kDAA6C,OAAS,iBAC/D,CAAC,MAAQ,gFAAgF,OAAS,kBAClG,CAAC,MAAQ,sDAAsD,OAAS,aACxE,CAAC,MAAQ,oEAAoE,OAAS,oBACtF,CAAC,MAAQ,qEAAqE,OAAS,eACvF,CAAC,MAAQ,yEAAoE,OAAS,eACtF,CAAC,MAAQ,iCAAiC,OAAS,qBAErDC,MAAO,EAEPC,MAAO,0CAGT,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBA7BF,E,uDAiCjBI,KAAKC,SAAS,CACZV,MAAOW,KAAKC,MAAMD,KAAKE,SAAWJ,KAAKX,MAAMC,OAAOe,Y,iCAKtDL,KAAKC,SAAS,CACZR,MAAOS,KAAKC,MAAMD,KAAKE,SAAWJ,KAAKX,MAAMG,OAAOa,Y,iCAKtDL,KAAKC,SAAS,CACZP,MAAO,yCACLM,KAAKX,MAAMG,OAAOQ,KAAKX,MAAMI,OAAOA,MAAQ,MAAQO,KAAKX,MAAMG,OAAOQ,KAAKX,MAAMI,OAAOa,W,kCAIlFC,GACVA,EAAEC,iBACFR,KAAKL,WACLK,KAAKH,a,+BAIL,OACE,yBAAKY,UAAU,MAAMC,MAAO,CAACC,gBAAiBX,KAAKX,MAAMC,OAAOU,KAAKX,MAAME,SACzE,yBAAKqB,GAAG,aACN,wBAAIA,GAAG,QAAP,IAAgBZ,KAAKX,MAAMG,OAAOQ,KAAKX,MAAMI,OAAOA,MAApD,KACA,wBAAImB,GAAG,UAAUZ,KAAKX,MAAMG,OAAOQ,KAAKX,MAAMI,OAAOa,QACrD,uBAAGO,QAASb,KAAKF,SAAUc,GAAG,cAAcE,KAAMd,KAAKX,MAAMK,MAAOqB,YAAU,QAC5EC,OAAO,SAASC,IAAI,uBADtB,oBAEA,4BAAQL,GAAG,YAAYC,QAASb,KAAKD,YAAaW,MAAO,CAACnB,MAAOS,KAAKX,MAAMC,OAAOU,KAAKX,MAAME,SAA9F,mB,GAlEQ2B,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.590396a5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      colors: ['red','orange','yellow','green', 'blue', 'indigo', 'violet'],\n      color: 0,\n\n      quotes: [\n        {\"quote\":\"Life isn’t about getting and having, it’s about giving and being.\",\"author\":\"Kevin Kruse\"},\n        {\"quote\":\"Whatever the mind of man can conceive and believe, it can achieve.\",\"author\":\"Napoleon Hill\"},\n        {\"quote\":\"Strive not to be a success, but rather to be of value.\",\"author\":\"Albert Einstein\"},\n        {\"quote\":\"Two roads diverged in a wood, and I—I took the one less traveled by, And that has made all the difference.\",\"author\":\"Robert Frost\"},\n        {\"quote\":\"I attribute my success to this: I never gave or took any excuse.\",\"author\":\"Florence Nightingale\"},\n        {\"quote\":\"You miss 100% of the shots you don’t take.\",\"author\":\"Wayne Gretzky\"},\n        {\"quote\":\"The most difficult thing is the decision to act, the rest is merely tenacity.\",\"author\":\"Amelia Earhart\"},\n        {\"quote\":\"Every strike brings me closer to the next home run.\",\"author\":\"Babe Ruth\"},\n        {\"quote\":\"Definiteness of purpose is the starting point of all achievement.\",\"author\":\"W. Clement Stone\"},\n        {\"quote\":\"We must balance conspicuous consumption with conscious capitalism.\",\"author\":\"Kevin Kruse\"},\n        {\"quote\":\"Life is what happens to you while you’re busy making other plans.\",\"author\":\"John Lennon\"},\n        {\"quote\":\"We become what we think about.\",\"author\":\"Earl Nightingale\"},\n      ],\n      quote: 0,\n\n      tweet: \"https://twitter.com/intent/tweet?text=\"\n    }\n\n    this.setColor = this.setColor.bind(this);\n    this.setQuote = this.setQuote.bind(this);\n    this.setTweet = this.setTweet.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  setColor() {\n    this.setState({\n      color: Math.floor(Math.random() * this.state.colors.length)\n    });\n  }\n\n  setQuote() {\n    this.setState({\n      quote: Math.floor(Math.random() * this.state.quotes.length)\n    });\n  }\n\n  setTweet() {\n    this.setState({\n      tweet: \"https://twitter.com/intent/tweet?text=\" + \n        this.state.quotes[this.state.quote].quote + \" - \" + this.state.quotes[this.state.quote].author\n    });\n  }\n\n  handleClick(e) {   \n    e.preventDefault();    \n    this.setColor();  \n    this.setQuote();\n  }\n\n  render () {\n    return ( \n      <div className=\"App\" style={{backgroundColor: this.state.colors[this.state.color]}}>\n        <div id=\"quote-box\">\n          <h1 id=\"text\">\"{this.state.quotes[this.state.quote].quote}\"</h1>\n          <h1 id=\"author\">{this.state.quotes[this.state.quote].author}</h1>\n          <a onClick={this.setTweet} id=\"tweet-quote\" href={this.state.tweet} data-text=\"hello\" \n            target=\"_blank\" rel=\"noopener noreferrer\">Tweet this quote</a>\n          <button id=\"new-quote\" onClick={this.handleClick} style={{color: this.state.colors[this.state.color]}}>New Quote</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}